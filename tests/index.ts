import path from 'node:path';
import { describe, expect } from 'manten';
import { createFixture } from 'fs-fixture';
import { execaNode, type Options } from 'execa';
import outdent from 'outdent';

const tcPassingPath = path.resolve('./dist/index.mjs');

const env = {
	...process.env,
	PATH: process.env.PATH!.split(':').filter(p => !p.includes('node_modules/.bin')).join(':'),
};

const tcPassing = (
	args: string[],
	options?: Options,
) => execaNode(tcPassingPath, args, {
	env,
	...options,
});

describe('tc-passing', ({ describe, test }) => {
	describe('Error cases', ({ test }) => {
		test('No tsconfig.json found in CWD', async () => {
			await using fixture = await createFixture({
				'index.ts': 'const a: string = 1',
			});

			await expect(
				() => tcPassing([], {
					cwd: fixture.path,
				}),
			).rejects.toThrow(
				'Could not find tsconfig.json in ',
			);
		});

		test('No baseline file found', async () => {
			await using fixture = await createFixture({
				'index.ts': 'const a: string = 1',
				'tsconfig.json': '{}',
			});

			await expect(
				() => tcPassing([], {
					cwd: fixture.path,
				}),
			).rejects.toThrow(
				'Could not find baseline file at ',
			);
		});

		test('typescript not installed', async () => {
			await using fixture = await createFixture({
				'index.ts': 'const a: string = 1',
				'tsconfig.json': '{}',
			});

			await expect(
				() => tcPassing(['--update'], {
					cwd: fixture.path,
					env: {
						PATH: '',
					},
				}),
			).rejects.toThrow(
				'Could not find command `tsc`. Make sure `typescript` installed in the project',
			);
		});
	});

	test('tc-passing type check', async () => {
		const fixture = await createFixture({
			'index.ts': `
			import { fn } from './file.js';
			fn('1');
			`,
			'file.ts': 'export const fn = (a: string) => a;',
			'tsconfig.json': '{}',
			node_modules: {
				'.bin/tsc': ({ symlink }) => symlink(path.resolve('node_modules/.bin/tsc')),
				typescript: ({ symlink }) => symlink(path.resolve('node_modules/typescript')),
			},
		});

		await tcPassing(['--update'], {
			cwd: fixture.path,
		});

		const baseline = await fixture.readFile('.tc-passing', 'utf8');
		expect(baseline).toBe(
			outdent`
			# Files passing type check (100%) (Generated by tc-passing)
			file.ts
			index.ts
			`,
		);

		await tcPassing([], {
			cwd: fixture.path,
		});

		await fixture.writeFile(
			'./file.ts',
			'export const fn = (a: boolean) => a;',
		);

		await expect(
			() => tcPassing([], {
				cwd: fixture.path,
			}),
		).rejects.toThrow('index.ts:3:7 - error TS2345');
	});

	test('tc-passing type check with --project', async () => {
		await using fixture = await createFixture({
			'index.ts': `
			import { fn } from './file.js';
			fn('1');
			`,
			'file.ts': 'export const fn = (a: string) => a;',
			'tsconfig.json': '{}',
			node_modules: {
				'.bin/tsc': ({ symlink }) => symlink(path.resolve('node_modules/.bin/tsc')),
				typescript: ({ symlink }) => symlink(path.resolve('node_modules/typescript')),
			},
		});

		await tcPassing(['-p', fixture.path, '--update']);

		const baseline = await fixture.readFile('.tc-passing', 'utf8');
		expect(baseline).toBe(
			outdent`
			# Files passing type check (100%) (Generated by tc-passing)
			file.ts
			index.ts
			`,
		);

		await tcPassing(['-p', fixture.path]);

		await fixture.writeFile(
			'./file.ts',
			'export const fn = (a: boolean) => a;',
		);

		await expect(
			() => tcPassing(['-p', fixture.path]),
		).rejects.toThrow('index.ts:3:7 - error TS2345');
	});

	test('tc-passing type check with vue-tsc', async () => {
		await using fixture = await createFixture({
			'file.ts': 'export const fn = (a: string) => a;',
			'component.vue': `
			<script setup lang="ts">
			import { fn } from './file.js';
			const a = fn('1')
			</script>
			<template>
				{{ a }}
			</template>
			`,
			'tsconfig.json': '{}',
			node_modules: {
				'.bin/vue-tsc': ({ symlink }) => symlink(path.resolve('node_modules/.bin/vue-tsc')),
				'vue-tsc': ({ symlink }) => symlink(path.resolve('node_modules/vue-tsc')),
			},
		});

		await tcPassing(['--update'], {
			cwd: fixture.path,
		});

		const baseline = await fixture.readFile('.tc-passing', 'utf8');
		expect(baseline).toBe(
			outdent`
			# Files passing type check (100%) (Generated by tc-passing)
			component.vue
			file.ts
			`,
		);

		await tcPassing([], {
			cwd: fixture.path,
		});

		await fixture.writeFile(
			'./file.ts',
			'export const fn = (a: boolean) => a;',
		);

		await expect(
			() => tcPassing([], {
				cwd: fixture.path,
			}),
		).rejects.toThrow('component.vue:4:17 - error TS2345');
	});
});
