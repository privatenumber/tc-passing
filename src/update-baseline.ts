import fs from 'node:fs/promises';
import path from 'node:path';
import split from 'split2';
import { name } from '../package.json';
import type { TsconfigMeta } from './get-tsconfig';
import { spawnTsc } from './tsc.js';

const tscErrorFilePattern = /^(.+)\(\d+,\d+\):/;

const getPassingFiles = async (
	tsconfig: TsconfigMeta,
) => {
	const erroringFiles = new Set<string>();
	const files = new Set<string>();
	const projectPrefix = tsconfig.projectPath + path.sep;

	console.log('update-baseline.ts', { tsconfig });
	const child = await spawnTsc(['--listFiles', '-p', tsconfig.tsconfigPath]);
	child.stdout
		.pipe(split())
		.on('data', (data) => {
			console.log({ data });
			if (data.startsWith(projectPrefix)) {
				const filePath = data.slice(projectPrefix.length);
				if (!filePath.startsWith(`node_modules${path.sep}`)) {
					files.add(filePath);
				}
				return;
			}

			const match = data.match(tscErrorFilePattern);
			if (match) {
				erroringFiles.add(match[1]);
			}
		});

	console.log(child);
	await child.promise;

	const totalFiles = files.size;
	for (const filePath of erroringFiles) {
		files.delete(filePath);
	}

	return {
		passingPercent: (files.size / totalFiles).toLocaleString('en-US', {
			style: 'percent',
			maximumFractionDigits: 2,
		}),
		files: Array.from(files).sort(),
	};
};

export const updateBaseline = async (
	tsconfig: TsconfigMeta,
	baselinePath: string,
) => {
	const { passingPercent, files } = await getPassingFiles(tsconfig);
	await fs.writeFile(
		baselinePath,
		`# Files passing type check (${passingPercent}) (Generated by ${name})\n${files.join('\n')}`,
	);
	console.log(`Generated baseline file: ${path.relative(process.cwd(), baselinePath)}`);
};
